/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package coinbase;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Map;
import java.util.Map.Entry;

import com.github.kevinsawicki.http.HttpRequest;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;

public class App {

    private static final String COINBASE_URL = "https://api.coinbase.com/v2/exchange-rates";

    private static final String BINANCE_URL = "https://api.binance.us/api/v3/ticker/24hr";

    private static final String BASE_PATH = new File("").getAbsolutePath();

    private static final String CSV_FILE_NAME = BASE_PATH + "/src/files/currencies.csv";

    private static final String USER_INPUT_FILE_NAME = BASE_PATH + "/src/files/input.txt";

    private static final String OUTPUT_FILE_NAME = BASE_PATH + "/src/files/output.txt";

    /**
     * Takes a currency from the user via file to query the coinbase API with 
     * Defaults to USD if input invalid
     * 
     * @param validCurrencies
     * @return
     * @throws IOException
     */
    public String getUserInput(Set<String> validCurrencies) throws IOException {
      String curr = new String(Files.readAllBytes(Paths.get(USER_INPUT_FILE_NAME)));
      if (! validCurrencies.contains(curr)) {
        System.out.println("Invalid Currency, defaulting to USD.");
        curr = "";
      }
      return curr;
    }

    /**
     * Queries coinbase API with currency, defaults to USD
     * 
     * @param currency
     * @return
     */
    public JsonObject getCurrencyRates(String currency) {
      String coinbaseResponse = HttpRequest.get(COINBASE_URL, true, "currency", currency).body();
      Gson gson = new Gson();
      JsonElement element = gson.fromJson (coinbaseResponse, JsonElement.class);
      JsonObject jsonObj = element.getAsJsonObject();
      return jsonObj.getAsJsonObject("data").getAsJsonObject("rates");
    }

    /**
     * Reads CSV file with non cryptocurrencies
     * 
     * @return
     * @throws IOException
     */
    public Set<String> readNonCryptoCurrencies() throws IOException { 
      Set<String> content = new HashSet<>();
      try(BufferedReader br = new BufferedReader(new FileReader(CSV_FILE_NAME))) {
          String line = "";
          while ((line = br.readLine()) != null) {
              content.add(line.split(",")[0]);
          }
      } catch (FileNotFoundException e) {
        //Some error logging
      }
      return content;
    }

    /**
     * Filter out non cryptocurrencies
     * 
     * @param unfilteredJsonObj
     * @param nonCryptoList
     * @return
     */
    public Map<String, BigDecimal> filterCurrency(JsonObject unfilteredJsonObj, Set<String> nonCryptoList) {
        Map <String, BigDecimal> filteredCurrencyMap = new HashMap<String, BigDecimal>();
        Set<Entry<String, JsonElement>> unfilteredEntrySet = unfilteredJsonObj.entrySet();
        for(Map.Entry<String,JsonElement> entry : unfilteredEntrySet){
          String currCode = entry.getKey();
          if (! nonCryptoList.contains(currCode)) {
            filteredCurrencyMap.put(currCode, entry.getValue().getAsBigDecimal());
          }
        }
        return filteredCurrencyMap;
    }

    /**
     * Query binanace API for crypto value changes in the last 24 hours
     * 
     * @return
     */
    public ArrayList<Cryptocurrency> getBinanceData() {
      String binanceResponse = HttpRequest.get(BINANCE_URL).body();
      //System.out.println(binanceResponse);
      Gson gson = new Gson();
      Type mapType = new TypeToken<ArrayList<Cryptocurrency>>(){}.getType();
      ArrayList<Cryptocurrency> cryptoBinanceList = gson.fromJson(binanceResponse, mapType);
      //JsonObject jsonObj = element.getAsJsonObject();
      return cryptoBinanceList;
    }

    /**
     * Create a map of all the binance trades to make querying binance trades easier
     * 
     * @param cryptoBinanceList
     * @return
     */
    public Map<String, Cryptocurrency> processBinanceData(ArrayList<Cryptocurrency> cryptoBinanceList) {
      Map <String, Cryptocurrency> cryptoMap = new HashMap<>();

      // Make the symbol of trade (eg BNBBTC) the map key
      for (Cryptocurrency cryptocurrency : cryptoBinanceList) {
        cryptoMap.put(cryptocurrency.symbol, cryptocurrency);
      }
      return cryptoMap;
    }

    /**
     * Go through list of cryptocurrencies and output information for each
     * 
     * @param cryptocurrencyMap
     * @param binanceMap
     * @throws IOException
     */
    public void processCurrency(Map<String, BigDecimal> cryptocurrencyMap, Map<String, Cryptocurrency> binanceMap) throws IOException {
      String conversionSymbol = "";
      Output output = new Output();
      Cryptocurrency cryptocurrency = new Cryptocurrency();

      // Iterate through list of cryptocurrencies and process output for each
      for(Map.Entry<String, BigDecimal> entry : cryptocurrencyMap.entrySet()) {
        conversionSymbol =  entry.getKey() + "BTC";
        cryptocurrency = binanceMap.get(conversionSymbol);

        // Check that cryptocurrency trade exists
        if (cryptocurrency != null) {
          setOutputs(output, entry.getKey(), entry.getValue(), cryptocurrency);
          // Output data to output.txt
          System.out.println(output.toString());
        }
      }
    }

    /**
     * Calculate and set each field in output
     * 
     * @param output
     * @param currCode
     * @param currVal
     * @param cryptocurrency
     */
    public void setOutputs(Output output, String currCode, BigDecimal currVal, Cryptocurrency cryptocurrency) {
      output.currCode = currCode;
      output.currVal = 1 / currVal.doubleValue();
      output.percentGainOrLoss = cryptocurrency.priceChangePercent;
      Double currencyWithOneBitcoinYesterday = 1 / Double.valueOf(cryptocurrency.openPrice);
      // Check that there is a price
      if (! cryptocurrency.openPrice.equals("0.00000000")) {
        output.oneBtcBoughtOneDayAgo =  String.valueOf(currencyWithOneBitcoinYesterday);
      } else {
        output.oneBtcBoughtOneDayAgo = "0.00";
      }
    }

    public static void main(String[] args) throws IOException {
      App app = new App();

      // Get list of non cryptocurrencies
      Set<String> nonCryptoCurrencies = app.readNonCryptoCurrencies();

      // Get user input on currency to get cryptocurrency value in
      String userCurrency = app.getUserInput(nonCryptoCurrencies);

      // Get results from coinbase API query with user defined currency input
      JsonObject currencyRates = app.getCurrencyRates(userCurrency);

      // Filter out non crpytocurrencies from coinbase API results
      Map<String, BigDecimal> filteredCurrencies = app.filterCurrency(currencyRates, nonCryptoCurrencies);

      // Get last 24 hour crypto trade data from binance API
      ArrayList<Cryptocurrency> cryptoBinanceList = app.getBinanceData();

      // Create a queryable map of binance data
      Map<String, Cryptocurrency> binanceMap = app.processBinanceData(cryptoBinanceList);

      // Set output to output.txt file
      PrintStream out = new PrintStream(new FileOutputStream(OUTPUT_FILE_NAME));
      System.setOut(out);

      // Process and output data for each of coinbase API cryptocurrencies
      app.processCurrency(filteredCurrencies, binanceMap);
    }
}
